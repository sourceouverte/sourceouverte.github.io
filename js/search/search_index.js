var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/Graph.html",[0,0.086,1,1.333]],["body/classes/Graph.html",[0,0.05,1,2.101,2,0.316,3,0.384,4,0.834,5,0.316,6,1.126,7,0.256,8,0.401,9,4.032,10,1.016,11,2.252,12,2.252,13,2.252,14,2.252,15,2.252,16,0.602,17,0.496,18,0.067,19,1.006,20,1.446,21,0.968,22,1.436,23,2.252,24,2.591,25,4.032,26,1.436,27,1.418,28,3.351,29,0.912,30,0.912,31,0.752,32,0.912,33,2.178,34,3.144,35,3.144,36,1.769,37,1.418,38,2.252,39,1.436,40,1.006,41,2.252,42,1.436,43,2.252,44,2.252,45,2.192,46,2.252,47,2.252,48,2.252,49,1.436,50,1.54,51,2.252,52,2.252,53,2.252,54,1.436,55,0.721,56,0.648,57,0.77,58,0.384,59,1.708,60,1.436,61,1.436,62,1.436,63,0.922,64,1.436,65,1.436,66,1.436,67,1.436,68,1.436,69,1.436,70,1.207,71,1.436,72,1.436,73,1.436,74,0.648,75,1.436,76,1.436,77,1.016,78,1.436,79,1.436,80,1.436,81,1.436,82,0.03,83,0.03]],["title/classes/LinkedList.html",[0,0.086,84,1.333]],["body/classes/LinkedList.html",[0,0.044,2,0.277,3,0.336,4,0.277,5,0.277,7,0.224,8,0.361,10,0.914,16,0.542,17,0.873,18,0.068,19,1.197,21,0.961,27,0.914,29,0.68,30,0.68,31,0.753,32,0.68,36,1.443,37,1.148,40,1.487,55,0.815,56,0.568,57,0.674,58,0.336,59,1.542,63,1.301,70,1.364,74,1.148,77,1.316,82,0.027,83,0.027,84,1.086,85,2.004,86,2.401,87,0.987,88,1.634,89,1.634,90,3.199,91,1.589,92,1.589,93,2.027,94,1.364,95,2.027,96,2.248,97,1.258,98,1.086,99,1.258,100,2.027,101,1.469,102,1.258,103,1.832,104,2.027,105,1.258,106,2.027,107,2.027,108,2.027,109,3.028,110,2.288,111,1.258,112,2.027,113,2.027,114,1.996,115,3.199,116,1.589,117,2.918,118,3.595,119,2.027,120,1.258,121,2.545,122,2.918,123,1.258,124,1.258,125,1.258,126,0.987,127,2.027,128,1.258,129,2.027,130,1.589,131,1.258,132,1.258,133,1.258,134,3.199,135,1.258,136,2.027,137,1.258,138,2.027,139,2.027,140,1.258,141,2.027,142,1.258]],["title/classes/LinkedListNode.html",[0,0.086,96,1.333]],["body/classes/LinkedListNode.html",[0,0.084,2,0.531,3,0.644,4,0.531,5,0.531,7,0.429,8,0.586,16,0.644,17,0.961,18,0.066,21,1.079,29,0.644,30,0.644,31,0.889,32,0.644,58,0.644,82,0.044,83,0.044,85,2.265,86,2.714,94,1.766,96,2.545,101,1.608,103,2.265,116,3.422,143,1.89,144,4.467,145,4.467,146,1.547,147,3.295,148,2.41,149,2.41,150,1.547,151,2.41,152,2.41]],["title/classes/Node.html",[0,0.086,40,0.796]],["body/classes/Node.html",[0,0.092,2,0.586,3,0.711,4,0.586,5,0.586,7,0.474,8,0.627,16,0.711,17,0.963,18,0.066,21,1.123,29,0.711,30,0.711,31,0.925,32,0.711,40,1.489,55,0.852,58,0.711,82,0.047,83,0.047,94,1.426,98,1.888,101,1.663,146,2.262,150,1.709,153,2.087,154,4.581,155,3.096,156,3.522,157,2.661,158,2.661,159,2.087,160,2.762,161,1.709,162,2.661,163,2.087,164,2.661]],["title/classes/Queue.html",[0,0.086,165,1.122]],["body/classes/Queue.html",[0,0.067,2,0.422,3,0.512,4,0.422,5,0.422,7,0.341,8,0.498,10,1.263,16,0.748,17,0.422,18,0.068,19,0.896,21,1.082,27,1.263,29,0.512,30,0.512,31,0.617,32,0.512,36,1.886,37,0.864,50,1.263,55,0.613,56,0.864,57,1.026,58,0.512,59,0.864,70,1.501,74,1.643,77,0.864,82,0.038,83,0.038,88,2.599,89,1.23,101,1.714,165,2.055,166,1.502,167,2.596,168,3.642,169,2.8,170,2.856,171,2.196,172,2.596,173,3.039,174,1.915,175,1.915,176,2.856,177,2.8,178,1.915,179,2.856,180,1.915,181,1.502,182,1.915,183,1.798,184,1.502,185,1.915,186,1.502,187,2.196,188,2.8,189,1.915,190,1.915,191,1.502,192,1.502,193,1.502]],["title/classes/Stack.html",[0,0.086,194,1.122]],["body/classes/Stack.html",[0,0.065,2,0.411,3,0.499,4,0.411,5,0.411,7,0.332,8,0.489,10,1.241,16,0.735,17,0.411,18,0.067,19,0.88,21,1.072,27,1.241,29,0.499,30,0.499,31,0.606,32,0.499,36,1.871,37,0.843,50,1.241,55,0.598,56,0.843,57,1.001,58,0.499,59,0.843,63,1.2,70,1.474,74,1.624,77,0.843,82,0.037,83,0.037,88,2.576,89,1.2,101,1.742,167,2.559,170,2.823,171,2.157,172,2.559,173,3.008,176,2.823,179,2.823,181,1.465,183,1.766,184,1.465,186,1.465,187,2.157,191,1.465,192,1.465,193,1.465,194,2.045,195,1.465,196,3.599,197,2.75,198,1.868,199,1.868,200,1.868,201,2.75,202,1.868,203,1.868,204,1.868,205,2.75,206,2.75,207,1.868,208,1.868,209,2.75,210,1.868]],["title/classes/Tree.html",[0,0.086,211,1.333]],["body/classes/Tree.html",[0,0.078,2,0.491,3,0.596,4,0.491,5,0.491,7,0.397,8,0.556,10,1.409,16,0.835,17,0.491,18,0.067,19,1,20,2.006,21,1.043,27,1.409,29,0.963,30,0.963,31,0.794,32,0.963,36,1.626,37,1.409,40,1.558,50,1.409,55,0.714,58,0.596,59,1.626,74,1.006,82,0.042,83,0.042,91,2.45,92,2.45,98,1.932,126,2.45,211,2.392,212,1.749,213,3.604,214,3.124,215,2.231,216,3.124,217,2.231,218,3.124,219,2.231,220,3.124,221,2.231,222,2.231,223,2.231,224,2.231]],["title/classes/Vertex.html",[0,0.086,24,1.333]],["body/classes/Vertex.html",[0,0.086,2,0.544,3,0.66,4,0.544,5,0.544,7,0.44,8,0.596,16,0.895,17,0.968,18,0.066,19,1.073,20,2.618,21,1.139,24,2.038,29,0.66,30,0.66,31,0.939,32,1.016,45,2.442,55,1.073,58,0.66,82,0.045,83,0.045,94,1.324,98,1.796,101,1.622,146,2.152,150,1.586,155,2.982,159,1.937,160,2.628,161,1.586,163,1.937,225,1.937,226,3.803,227,3.803,228,3.351,229,2.471,230,2.982,231,2.471,232,2.471,233,2.471,234,2.471,235,2.471]],["title/coverage.html",[236,2.161]],["body/coverage.html",[0,0.164,1,1.539,5,0.632,6,2.252,18,0.065,19,0.919,24,1.539,31,0.632,40,0.919,77,1.848,82,0.05,83,0.05,84,1.539,85,1.984,86,2.377,87,2.252,96,1.539,103,1.539,143,2.252,153,2.252,165,1.295,166,2.252,194,1.295,195,2.252,211,1.539,212,2.252,225,2.252,236,1.844,237,2.252,238,2.872,239,2.872,240,2.872,241,2.872,242,2.872,243,3.702,244,2.872,245,2.872,246,4.097,247,4.097,248,2.872,249,2.872]],["title/dependencies.html",[250,1.639,251,2.34]],["body/dependencies.html",[18,0.062,82,0.059,83,0.059,161,2.431,251,2.969,252,3.786]],["title/miscellaneous/enumerations.html",[253,1.639,254,2.34]],["body/miscellaneous/enumerations.html",[4,0.755,7,0.454,17,1.072,18,0.066,28,2.002,40,0.817,45,1.639,50,1.152,56,1.546,82,0.046,83,0.046,85,1.368,103,1.368,109,2.002,110,2.687,114,2.002,130,2.002,165,1.152,183,2.483,194,1.152,230,2.687,253,2.002,254,2.002,255,2.553,256,2.553,257,3.426,258,2.553,259,3.426,260,2.553,261,2.553,262,2.553,263,2.553,264,2.553,265,2.553,266,2.553,267,2.553,268,2.553,269,2.553,270,2.553,271,2.553,272,2.553,273,2.553,274,3.426,275,3.426,276,3.426,277,2.553,278,2.553,279,3.426,280,3.426,281,3.426,282,2.553,283,2.553]],["title/index.html",[7,0.372,284,2.09,285,2.09]],["body/index.html",[1,1.599,18,0.051,82,0.051,83,0.051,84,1.599,165,1.346,194,1.346,211,1.599,236,2.436,237,2.975,286,3.271,287,3.271,288,2.975,289,4.632,290,3.794,291,4.706,292,2.984,293,4.171,294,4.171,295,3.794,296,2.984,297,3.794,298,3.794,299,3.794,300,2.984,301,2.34,302,2.34,303,2.984,304,2.984]],["title/modules.html",[305,2.64]],["body/modules.html",[18,0.059,82,0.059,83,0.059,305,3.019]],["title/overview.html",[306,2.64]],["body/overview.html",[2,0.838,18,0.059,82,0.059,83,0.059,306,2.985,307,3.807]],["title/properties.html",[8,0.531,250,1.639]],["body/properties.html",[8,0.629,18,0.065,33,2.771,82,0.056,83,0.056,286,2.771,287,2.771,288,2.771,301,2.771,302,2.771,308,3.534,309,3.534,310,3.534,311,3.534,312,3.534,313,3.534]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":77,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"coverage.html":{}}}],["0.1.6",{"_index":309,"title":{},"body":{"properties.html":{}}}],["0/5",{"_index":243,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":242,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":209,"title":{},"body":{"classes/Stack.html":{}}}],["3/5",{"_index":247,"title":{},"body":{"coverage.html":{}}}],["3/8",{"_index":245,"title":{},"body":{"coverage.html":{}}}],["37",{"_index":244,"title":{},"body":{"coverage.html":{}}}],["5/7",{"_index":241,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":246,"title":{},"body":{"coverage.html":{}}}],["71",{"_index":240,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":307,"title":{},"body":{"overview.html":{}}}],["8.3.2",{"_index":252,"title":{},"body":{"dependencies.html":{}}}],["accessors",{"_index":171,"title":{},"body":{"classes/Queue.html":{},"classes/Stack.html":{}}}],["add",{"_index":27,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{}}}],["added",{"_index":133,"title":{},"body":{"classes/LinkedList.html":{}}}],["addedge",{"_index":11,"title":{},"body":{"classes/Graph.html":{}}}],["addedge(source",{"_index":23,"title":{},"body":{"classes/Graph.html":{}}}],["addnode",{"_index":91,"title":{},"body":{"classes/LinkedList.html":{},"classes/Tree.html":{}}}],["addnode(node",{"_index":216,"title":{},"body":{"classes/Tree.html":{}}}],["addnode(value",{"_index":100,"title":{},"body":{"classes/LinkedList.html":{}}}],["addvertex",{"_index":12,"title":{},"body":{"classes/Graph.html":{}}}],["addvertex(vertex",{"_index":38,"title":{},"body":{"classes/Graph.html":{}}}],["ahuja",{"_index":302,"title":{},"body":{"index.html":{},"properties.html":{}}}],["alpha",{"_index":310,"title":{},"body":{"properties.html":{}}}],["already",{"_index":270,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["array",{"_index":47,"title":{},"body":{"classes/Graph.html":{}}}],["array.from(vertex.edges",{"_index":65,"title":{},"body":{"classes/Graph.html":{}}}],["associated",{"_index":43,"title":{},"body":{"classes/Graph.html":{}}}],["author",{"_index":313,"title":{},"body":{"properties.html":{}}}],["before",{"_index":130,"title":{},"body":{"classes/LinkedList.html":{},"miscellaneous/enumerations.html":{}}}],["bool",{"_index":191,"title":{},"body":{"classes/Queue.html":{},"classes/Stack.html":{}}}],["branchnodes",{"_index":154,"title":{},"body":{"classes/Node.html":{}}}],["build",{"_index":298,"title":{},"body":{"index.html":{}}}],["case",{"_index":136,"title":{},"body":{"classes/LinkedList.html":{}}}],["certain",{"_index":107,"title":{},"body":{"classes/LinkedList.html":{}}}],["class",{"_index":0,"title":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{}},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{},"overview.html":{}}}],["comprised",{"_index":51,"title":{},"body":{"classes/Graph.html":{}}}],["const",{"_index":63,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/Stack.html":{}}}],["constructor",{"_index":94,"title":{},"body":{"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Vertex.html":{}}}],["constructor(value",{"_index":146,"title":{},"body":{"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Vertex.html":{}}}],["contributors",{"_index":300,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":236,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["current",{"_index":122,"title":{},"body":{"classes/LinkedList.html":{}}}],["current.next",{"_index":124,"title":{},"body":{"classes/LinkedList.html":{}}}],["current.value",{"_index":123,"title":{},"body":{"classes/LinkedList.html":{}}}],["cut",{"_index":280,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["data",{"_index":286,"title":{},"body":{"index.html":{},"properties.html":{}}}],["default",{"_index":16,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{}}}],["defined",{"_index":21,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{}}}],["dependencies",{"_index":251,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["dequeue",{"_index":168,"title":{},"body":{"classes/Queue.html":{}}}],["description",{"_index":33,"title":{},"body":{"classes/Graph.html":{},"properties.html":{}}}],["destination",{"_index":25,"title":{},"body":{"classes/Graph.html":{}}}],["destination.edges.delete(source.id",{"_index":81,"title":{},"body":{"classes/Graph.html":{}}}],["destination.edges.has(source.id",{"_index":69,"title":{},"body":{"classes/Graph.html":{}}}],["destination.edges.set(source.id",{"_index":73,"title":{},"body":{"classes/Graph.html":{}}}],["destination.edges.size",{"_index":78,"title":{},"body":{"classes/Graph.html":{}}}],["docs",{"_index":299,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":237,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["edge",{"_index":28,"title":{},"body":{"classes/Graph.html":{},"miscellaneous/enumerations.html":{}}}],["edge_exits",{"_index":269,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["edges",{"_index":45,"title":{},"body":{"classes/Graph.html":{},"classes/Vertex.html":{},"miscellaneous/enumerations.html":{}}}],["edges_empty",{"_index":268,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["element",{"_index":176,"title":{},"body":{"classes/Queue.html":{},"classes/Stack.html":{}}}],["empty",{"_index":183,"title":{},"body":{"classes/Queue.html":{},"classes/Stack.html":{},"miscellaneous/enumerations.html":{}}}],["ending",{"_index":35,"title":{},"body":{"classes/Graph.html":{}}}],["enqueue",{"_index":169,"title":{},"body":{"classes/Queue.html":{}}}],["enqueue(item",{"_index":177,"title":{},"body":{"classes/Queue.html":{}}}],["enumerations",{"_index":254,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error(errors.edge_exits",{"_index":71,"title":{},"body":{"classes/Graph.html":{}}}],["error(errors.edges_empty",{"_index":79,"title":{},"body":{"classes/Graph.html":{}}}],["error(errors.invalid_node_position",{"_index":142,"title":{},"body":{"classes/LinkedList.html":{}}}],["error(errors.linked_list_empty",{"_index":127,"title":{},"body":{"classes/LinkedList.html":{}}}],["error(errors.queue_empty",{"_index":188,"title":{},"body":{"classes/Queue.html":{}}}],["error(errors.stack_empty",{"_index":205,"title":{},"body":{"classes/Stack.html":{}}}],["errors",{"_index":56,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"miscellaneous/enumerations.html":{}}}],["errors.enum",{"_index":57,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/Queue.html":{},"classes/Stack.html":{}}}],["exists",{"_index":271,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["export",{"_index":58,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{},"coverage.html":{}}}],["generate",{"_index":297,"title":{},"body":{"index.html":{}}}],["getedges",{"_index":13,"title":{},"body":{"classes/Graph.html":{}}}],["getedges(vertex",{"_index":41,"title":{},"body":{"classes/Graph.html":{}}}],["getisempty",{"_index":181,"title":{},"body":{"classes/Queue.html":{},"classes/Stack.html":{}}}],["getnode",{"_index":92,"title":{},"body":{"classes/LinkedList.html":{},"classes/Tree.html":{}}}],["getnode(nodeid",{"_index":218,"title":{},"body":{"classes/Tree.html":{}}}],["getnode(value",{"_index":104,"title":{},"body":{"classes/LinkedList.html":{}}}],["getsize",{"_index":184,"title":{},"body":{"classes/Queue.html":{},"classes/Stack.html":{}}}],["getting",{"_index":284,"title":{"index.html":{}},"body":{}}],["given",{"_index":113,"title":{},"body":{"classes/LinkedList.html":{}}}],["graph",{"_index":1,"title":{"classes/Graph.html":{}},"body":{"classes/Graph.html":{},"coverage.html":{},"index.html":{}}}],["having",{"_index":106,"title":{},"body":{"classes/LinkedList.html":{}}}],["head",{"_index":88,"title":{},"body":{"classes/LinkedList.html":{},"classes/Queue.html":{},"classes/Stack.html":{}}}],["id",{"_index":155,"title":{},"body":{"classes/Node.html":{},"classes/Vertex.html":{}}}],["identifier",{"_index":238,"title":{},"body":{"coverage.html":{}}}],["identifying",{"_index":44,"title":{},"body":{"classes/Graph.html":{}}}],["implemented",{"_index":290,"title":{},"body":{"index.html":{}}}],["import",{"_index":55,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{},"miscellaneous/enumerations.html":{}}}],["indicate",{"_index":131,"title":{},"body":{"classes/LinkedList.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{}}}],["insert",{"_index":112,"title":{},"body":{"classes/LinkedList.html":{}}}],["inserted",{"_index":129,"title":{},"body":{"classes/LinkedList.html":{}}}],["insertnode",{"_index":93,"title":{},"body":{"classes/LinkedList.html":{}}}],["insertnode(value",{"_index":108,"title":{},"body":{"classes/LinkedList.html":{}}}],["invalid_node_position",{"_index":262,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["isempty",{"_index":172,"title":{},"body":{"classes/Queue.html":{},"classes/Stack.html":{}}}],["isolated",{"_index":274,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["item",{"_index":179,"title":{},"body":{"classes/Queue.html":{},"classes/Stack.html":{}}}],["key",{"_index":64,"title":{},"body":{"classes/Graph.html":{}}}],["labeled",{"_index":281,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["leaf",{"_index":275,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["length",{"_index":89,"title":{},"body":{"classes/LinkedList.html":{},"classes/Queue.html":{},"classes/Stack.html":{}}}],["library",{"_index":289,"title":{},"body":{"index.html":{}}}],["license",{"_index":311,"title":{},"body":{"properties.html":{}}}],["linked",{"_index":114,"title":{},"body":{"classes/LinkedList.html":{},"miscellaneous/enumerations.html":{}}}],["linked_list_empty",{"_index":261,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["linkedlist",{"_index":84,"title":{"classes/LinkedList.html":{}},"body":{"classes/LinkedList.html":{},"coverage.html":{},"index.html":{}}}],["linkedlistnode",{"_index":96,"title":{"classes/LinkedListNode.html":{}},"body":{"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"coverage.html":{}}}],["linkedlistnode(value",{"_index":119,"title":{},"body":{"classes/LinkedList.html":{}}}],["list",{"_index":103,"title":{},"body":{"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["list.ts",{"_index":87,"title":{},"body":{"classes/LinkedList.html":{},"coverage.html":{}}}],["list.ts:20",{"_index":102,"title":{},"body":{"classes/LinkedList.html":{}}}],["list.ts:39",{"_index":105,"title":{},"body":{"classes/LinkedList.html":{}}}],["list.ts:6",{"_index":97,"title":{},"body":{"classes/LinkedList.html":{}}}],["list.ts:7",{"_index":99,"title":{},"body":{"classes/LinkedList.html":{}}}],["list.ts:71",{"_index":111,"title":{},"body":{"classes/LinkedList.html":{}}}],["list.ts:8",{"_index":95,"title":{},"body":{"classes/LinkedList.html":{}}}],["list/linked",{"_index":86,"title":{},"body":{"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"coverage.html":{}}}],["list/node",{"_index":272,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["madhur",{"_index":301,"title":{},"body":{"index.html":{},"properties.html":{}}}],["map",{"_index":20,"title":{},"body":{"classes/Graph.html":{},"classes/Tree.html":{},"classes/Vertex.html":{}}}],["matching",{"_index":83,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["methods",{"_index":10,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{}}}],["miscellaneous",{"_index":253,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["mit",{"_index":312,"title":{},"body":{"properties.html":{}}}],["mode",{"_index":296,"title":{},"body":{"index.html":{}}}],["modules",{"_index":305,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["name",{"_index":30,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{}}}],["new",{"_index":19,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{},"coverage.html":{}}}],["newly",{"_index":132,"title":{},"body":{"classes/LinkedList.html":{}}}],["next",{"_index":144,"title":{},"body":{"classes/LinkedListNode.html":{}}}],["node",{"_index":40,"title":{"classes/Node.html":{}},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/Node.html":{},"classes/Tree.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["node.next",{"_index":141,"title":{},"body":{"classes/LinkedList.html":{}}}],["node.prev",{"_index":121,"title":{},"body":{"classes/LinkedList.html":{}}}],["node.ts",{"_index":143,"title":{},"body":{"classes/LinkedListNode.html":{},"coverage.html":{}}}],["node.ts:2",{"_index":149,"title":{},"body":{"classes/LinkedListNode.html":{}}}],["node.ts:3",{"_index":148,"title":{},"body":{"classes/LinkedListNode.html":{}}}],["node.ts:4",{"_index":147,"title":{},"body":{"classes/LinkedListNode.html":{}}}],["nodeid",{"_index":220,"title":{},"body":{"classes/Tree.html":{}}}],["nodeposition",{"_index":110,"title":{},"body":{"classes/LinkedList.html":{},"miscellaneous/enumerations.html":{}}}],["nodeposition.after",{"_index":140,"title":{},"body":{"classes/LinkedList.html":{}}}],["nodeposition.before",{"_index":137,"title":{},"body":{"classes/LinkedList.html":{}}}],["nodes",{"_index":213,"title":{},"body":{"classes/Tree.html":{}}}],["nodetobeinserted",{"_index":134,"title":{},"body":{"classes/LinkedList.html":{}}}],["nodetobeinserted.next",{"_index":139,"title":{},"body":{"classes/LinkedList.html":{}}}],["nodetobeinserted.prev",{"_index":138,"title":{},"body":{"classes/LinkedList.html":{}}}],["npm",{"_index":293,"title":{},"body":{"index.html":{}}}],["null",{"_index":116,"title":{},"body":{"classes/LinkedList.html":{},"classes/LinkedListNode.html":{}}}],["number",{"_index":98,"title":{},"body":{"classes/LinkedList.html":{},"classes/Node.html":{},"classes/Tree.html":{},"classes/Vertex.html":{}}}],["optional",{"_index":32,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{}}}],["overview",{"_index":306,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":250,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":59,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{}}}],["parameters",{"_index":29,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{}}}],["participant",{"_index":62,"title":{},"body":{"classes/Graph.html":{}}}],["peek",{"_index":170,"title":{},"body":{"classes/Queue.html":{},"classes/Stack.html":{}}}],["please",{"_index":263,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["pop",{"_index":196,"title":{},"body":{"classes/Stack.html":{}}}],["position",{"_index":109,"title":{},"body":{"classes/LinkedList.html":{},"miscellaneous/enumerations.html":{}}}],["position.ts",{"_index":257,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["prev",{"_index":145,"title":{},"body":{"classes/LinkedListNode.html":{}}}],["private",{"_index":226,"title":{},"body":{"classes/Vertex.html":{}}}],["project",{"_index":292,"title":{},"body":{"index.html":{}}}],["properties",{"_index":8,"title":{"properties.html":{}},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{},"properties.html":{}}}],["provide",{"_index":264,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["push",{"_index":197,"title":{},"body":{"classes/Stack.html":{}}}],["push(item",{"_index":201,"title":{},"body":{"classes/Stack.html":{}}}],["queue",{"_index":165,"title":{"classes/Queue.html":{}},"body":{"classes/Queue.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["queue_empty",{"_index":267,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["rajdeep",{"_index":303,"title":{},"body":{"index.html":{}}}],["ratan",{"_index":304,"title":{},"body":{"index.html":{}}}],["reference",{"_index":61,"title":{},"body":{"classes/Graph.html":{}}}],["remove",{"_index":50,"title":{},"body":{"classes/Graph.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"miscellaneous/enumerations.html":{}}}],["removeedge",{"_index":14,"title":{},"body":{"classes/Graph.html":{}}}],["removeedge(source",{"_index":48,"title":{},"body":{"classes/Graph.html":{}}}],["removenode",{"_index":214,"title":{},"body":{"classes/Tree.html":{}}}],["removenode(node",{"_index":126,"title":{},"body":{"classes/LinkedList.html":{},"classes/Tree.html":{}}}],["removes",{"_index":125,"title":{},"body":{"classes/LinkedList.html":{}}}],["removevertex",{"_index":15,"title":{},"body":{"classes/Graph.html":{}}}],["removevertex(vertex",{"_index":53,"title":{},"body":{"classes/Graph.html":{}}}],["requested",{"_index":46,"title":{},"body":{"classes/Graph.html":{}}}],["results",{"_index":82,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":74,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{}}}],["returns",{"_index":36,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{}}}],["right",{"_index":162,"title":{},"body":{"classes/Node.html":{}}}],["run",{"_index":294,"title":{},"body":{"index.html":{}}}],["simplical",{"_index":278,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["simplicial",{"_index":277,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["sink",{"_index":276,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["size",{"_index":173,"title":{},"body":{"classes/Queue.html":{},"classes/Stack.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{},"miscellaneous/enumerations.html":{}}}],["source.edges.delete(destination.id",{"_index":80,"title":{},"body":{"classes/Graph.html":{}}}],["source.edges.has(destination.id",{"_index":68,"title":{},"body":{"classes/Graph.html":{}}}],["source.edges.set(destination.id",{"_index":72,"title":{},"body":{"classes/Graph.html":{}}}],["source.edges.size",{"_index":76,"title":{},"body":{"classes/Graph.html":{}}}],["src/.../errors.enum.ts",{"_index":255,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../node",{"_index":256,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../vertex",{"_index":258,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/errors.enum.ts",{"_index":260,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/graph/graph.ts",{"_index":6,"title":{},"body":{"classes/Graph.html":{},"coverage.html":{}}}],["src/graph/graph.ts:11",{"_index":39,"title":{},"body":{"classes/Graph.html":{}}}],["src/graph/graph.ts:20",{"_index":54,"title":{},"body":{"classes/Graph.html":{}}}],["src/graph/graph.ts:35",{"_index":26,"title":{},"body":{"classes/Graph.html":{}}}],["src/graph/graph.ts:49",{"_index":42,"title":{},"body":{"classes/Graph.html":{}}}],["src/graph/graph.ts:5",{"_index":22,"title":{},"body":{"classes/Graph.html":{}}}],["src/graph/graph.ts:58",{"_index":49,"title":{},"body":{"classes/Graph.html":{}}}],["src/graph/vertex",{"_index":273,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/graph/vertex.ts",{"_index":225,"title":{},"body":{"classes/Vertex.html":{},"coverage.html":{}}}],["src/graph/vertex.ts:5",{"_index":231,"title":{},"body":{"classes/Vertex.html":{}}}],["src/graph/vertex.ts:6",{"_index":229,"title":{},"body":{"classes/Vertex.html":{}}}],["src/graph/vertex.ts:7",{"_index":232,"title":{},"body":{"classes/Vertex.html":{}}}],["src/graph/vertex.ts:8",{"_index":228,"title":{},"body":{"classes/Vertex.html":{}}}],["src/linked",{"_index":85,"title":{},"body":{"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/queue/queue.ts",{"_index":166,"title":{},"body":{"classes/Queue.html":{},"coverage.html":{}}}],["src/queue/queue.ts:10",{"_index":178,"title":{},"body":{"classes/Queue.html":{}}}],["src/queue/queue.ts:18",{"_index":175,"title":{},"body":{"classes/Queue.html":{}}}],["src/queue/queue.ts:29",{"_index":180,"title":{},"body":{"classes/Queue.html":{}}}],["src/queue/queue.ts:4",{"_index":174,"title":{},"body":{"classes/Queue.html":{}}}],["src/queue/queue.ts:40",{"_index":182,"title":{},"body":{"classes/Queue.html":{}}}],["src/queue/queue.ts:48",{"_index":185,"title":{},"body":{"classes/Queue.html":{}}}],["src/stack/stack.ts",{"_index":195,"title":{},"body":{"classes/Stack.html":{},"coverage.html":{}}}],["src/stack/stack.ts:17",{"_index":200,"title":{},"body":{"classes/Stack.html":{}}}],["src/stack/stack.ts:3",{"_index":198,"title":{},"body":{"classes/Stack.html":{}}}],["src/stack/stack.ts:30",{"_index":199,"title":{},"body":{"classes/Stack.html":{}}}],["src/stack/stack.ts:41",{"_index":203,"title":{},"body":{"classes/Stack.html":{}}}],["src/stack/stack.ts:49",{"_index":204,"title":{},"body":{"classes/Stack.html":{}}}],["src/stack/stack.ts:9",{"_index":202,"title":{},"body":{"classes/Stack.html":{}}}],["src/tree/node.ts",{"_index":153,"title":{},"body":{"classes/Node.html":{},"coverage.html":{}}}],["src/tree/node.ts:4",{"_index":157,"title":{},"body":{"classes/Node.html":{}}}],["src/tree/node.ts:5",{"_index":158,"title":{},"body":{"classes/Node.html":{}}}],["src/tree/node.ts:6",{"_index":156,"title":{},"body":{"classes/Node.html":{}}}],["src/tree/tree.ts",{"_index":212,"title":{},"body":{"classes/Tree.html":{},"coverage.html":{}}}],["src/tree/tree.ts:10",{"_index":217,"title":{},"body":{"classes/Tree.html":{}}}],["src/tree/tree.ts:18",{"_index":221,"title":{},"body":{"classes/Tree.html":{}}}],["src/tree/tree.ts:26",{"_index":219,"title":{},"body":{"classes/Tree.html":{}}}],["src/tree/tree.ts:4",{"_index":215,"title":{},"body":{"classes/Tree.html":{}}}],["stack",{"_index":194,"title":{"classes/Stack.html":{}},"body":{"classes/Stack.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["stack_empty",{"_index":266,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["started",{"_index":285,"title":{"index.html":{}},"body":{}}],["starting",{"_index":34,"title":{},"body":{"classes/Graph.html":{}}}],["statements",{"_index":239,"title":{},"body":{"coverage.html":{}}}],["store",{"_index":167,"title":{},"body":{"classes/Queue.html":{},"classes/Stack.html":{}}}],["structures",{"_index":287,"title":{},"body":{"index.html":{},"properties.html":{}}}],["switch",{"_index":135,"title":{},"body":{"classes/LinkedList.html":{}}}],["t",{"_index":101,"title":{},"body":{"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Vertex.html":{}}}],["table",{"_index":249,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":248,"title":{},"body":{"coverage.html":{}}}],["tail",{"_index":90,"title":{},"body":{"classes/LinkedList.html":{}}}],["test",{"_index":291,"title":{},"body":{"index.html":{}}}],["this.branchnodes",{"_index":164,"title":{},"body":{"classes/Node.html":{}}}],["this.head",{"_index":115,"title":{},"body":{"classes/LinkedList.html":{}}}],["this.head.next",{"_index":128,"title":{},"body":{"classes/LinkedList.html":{}}}],["this.id",{"_index":163,"title":{},"body":{"classes/Node.html":{},"classes/Vertex.html":{}}}],["this.isempty",{"_index":187,"title":{},"body":{"classes/Queue.html":{},"classes/Stack.html":{}}}],["this.length",{"_index":118,"title":{},"body":{"classes/LinkedList.html":{}}}],["this.next",{"_index":151,"title":{},"body":{"classes/LinkedListNode.html":{}}}],["this.nodes.delete(node.id",{"_index":223,"title":{},"body":{"classes/Tree.html":{}}}],["this.nodes.get(nodeid",{"_index":224,"title":{},"body":{"classes/Tree.html":{}}}],["this.nodes.set(node.id",{"_index":222,"title":{},"body":{"classes/Tree.html":{}}}],["this.peek",{"_index":207,"title":{},"body":{"classes/Stack.html":{}}}],["this.prev",{"_index":152,"title":{},"body":{"classes/LinkedListNode.html":{}}}],["this.size",{"_index":192,"title":{},"body":{"classes/Queue.html":{},"classes/Stack.html":{}}}],["this.store.length",{"_index":193,"title":{},"body":{"classes/Queue.html":{},"classes/Stack.html":{}}}],["this.store.push(item",{"_index":186,"title":{},"body":{"classes/Queue.html":{},"classes/Stack.html":{}}}],["this.store.shift",{"_index":189,"title":{},"body":{"classes/Queue.html":{}}}],["this.store.splice(this.size",{"_index":208,"title":{},"body":{"classes/Stack.html":{}}}],["this.store[0",{"_index":190,"title":{},"body":{"classes/Queue.html":{}}}],["this.store[this.size",{"_index":210,"title":{},"body":{"classes/Stack.html":{}}}],["this.tail",{"_index":117,"title":{},"body":{"classes/LinkedList.html":{}}}],["this.tail.next",{"_index":120,"title":{},"body":{"classes/LinkedList.html":{}}}],["this.types",{"_index":234,"title":{},"body":{"classes/Vertex.html":{}}}],["this.value",{"_index":150,"title":{},"body":{"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Vertex.html":{}}}],["this.vertices.delete(vertex.id",{"_index":67,"title":{},"body":{"classes/Graph.html":{}}}],["this.vertices.set(vertex.id",{"_index":60,"title":{},"body":{"classes/Graph.html":{}}}],["throw",{"_index":70,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/Queue.html":{},"classes/Stack.html":{}}}],["topitem",{"_index":206,"title":{},"body":{"classes/Stack.html":{}}}],["tree",{"_index":211,"title":{"classes/Tree.html":{}},"body":{"classes/Tree.html":{},"coverage.html":{},"index.html":{}}}],["two",{"_index":52,"title":{},"body":{"classes/Graph.html":{}}}],["type",{"_index":31,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{},"coverage.html":{}}}],["type.enum",{"_index":233,"title":{},"body":{"classes/Vertex.html":{}}}],["type.enum.ts",{"_index":259,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["types",{"_index":227,"title":{},"body":{"classes/Vertex.html":{}}}],["typescript",{"_index":288,"title":{},"body":{"index.html":{},"properties.html":{}}}],["universal",{"_index":279,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unlabeled",{"_index":282,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unlabled",{"_index":283,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["uuid",{"_index":161,"title":{},"body":{"classes/Node.html":{},"classes/Vertex.html":{},"dependencies.html":{}}}],["uuidv4",{"_index":160,"title":{},"body":{"classes/Node.html":{},"classes/Vertex.html":{}}}],["v4",{"_index":159,"title":{},"body":{"classes/Node.html":{},"classes/Vertex.html":{}}}],["valid",{"_index":265,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["value",{"_index":17,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{},"miscellaneous/enumerations.html":{}}}],["value.edges.delete(vertex.id",{"_index":66,"title":{},"body":{"classes/Graph.html":{}}}],["version",{"_index":308,"title":{},"body":{"properties.html":{}}}],["vertex",{"_index":24,"title":{"classes/Vertex.html":{}},"body":{"classes/Graph.html":{},"classes/Vertex.html":{},"coverage.html":{}}}],["vertex.edges",{"_index":75,"title":{},"body":{"classes/Graph.html":{}}}],["vertextype",{"_index":230,"title":{},"body":{"classes/Vertex.html":{},"miscellaneous/enumerations.html":{}}}],["vertextype.labeled",{"_index":235,"title":{},"body":{"classes/Vertex.html":{}}}],["vertices",{"_index":9,"title":{},"body":{"classes/Graph.html":{}}}],["void",{"_index":37,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{}}}],["watch",{"_index":295,"title":{},"body":{"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Graph.html":{"url":"classes/Graph.html","title":"class - Graph","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Graph\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/graph/graph.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                vertices\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addEdge\n                            \n                            \n                                addVertex\n                            \n                            \n                                getEdges\n                            \n                            \n                                removeEdge\n                            \n                            \n                                removeVertex\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        vertices\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in src/graph/graph.ts:5\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addEdge\n                        \n                    \n                \n            \n            \n                \naddEdge(source: Vertex, destination: Vertex)\n                \n            \n\n\n            \n                \n                    Defined in src/graph/graph.ts:35\n                \n            \n\n\n            \n                \n                    To Add edge in the graph\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    source\n                                    \n                                                Vertex\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        starting of the edge\n\n                                    \n                                \n                                \n                                    destination\n                                    \n                                                Vertex\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ending of the edge\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addVertex\n                        \n                    \n                \n            \n            \n                \naddVertex(vertex: Vertex)\n                \n            \n\n\n            \n                \n                    Defined in src/graph/graph.ts:11\n                \n            \n\n\n            \n                \n                    To add node in the graph\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    vertex\n                                    \n                                                Vertex\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEdges\n                        \n                    \n                \n            \n            \n                \ngetEdges(vertex: Vertex)\n                \n            \n\n\n            \n                \n                    Defined in src/graph/graph.ts:49\n                \n            \n\n\n            \n                \n                    To get the associated vertices identifying the edges of a vertex\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    vertex\n                                    \n                                                Vertex\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        vertex for which the edges have been requested.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        array of vertices\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeEdge\n                        \n                    \n                \n            \n            \n                \nremoveEdge(source: Vertex, destination: Vertex)\n                \n            \n\n\n            \n                \n                    Defined in src/graph/graph.ts:58\n                \n            \n\n\n            \n                \n                    To remove the edge comprised of two vertices\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    source\n                                    \n                                                Vertex\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        starting of the edge\n\n                                    \n                                \n                                \n                                    destination\n                                    \n                                                Vertex\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ending of the edge\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeVertex\n                        \n                    \n                \n            \n            \n                \nremoveVertex(vertex: Vertex)\n                \n            \n\n\n            \n                \n                    Defined in src/graph/graph.ts:20\n                \n            \n\n\n            \n                \n                    To remove a node from graph\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    vertex\n                                    \n                                                Vertex\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Errors } from '../errors.enum';\nimport Vertex from './vertex';\n\nexport default class Graph {\n  vertices = new Map();\n\n  /**\n   * To add node in the graph\n   * @param vertex\n   */\n  addVertex(vertex: Vertex) {\n    this.vertices.set(vertex.id, vertex);\n  }\n\n  /**\n   * To remove a node from graph\n   * @param source\n   * @returns\n   */\n  removeVertex(vertex: Vertex) {\n    // Remove the reference of vertex from all the edges where it was a participant\n    for (const [key, value] of Array.from(vertex.edges)) {\n      value.edges.delete(vertex.id);\n    }\n\n    this.vertices.delete(vertex.id);\n  }\n\n  /**\n   * To Add edge in the graph\n   * @param source starting of the edge\n   * @param destination ending of the edge\n   * @returns\n   */\n  addEdge(source: Vertex, destination: Vertex) {\n    if (source.edges.has(destination.id) && destination.edges.has(source.id)) {\n      throw new Error(Errors.EDGE_EXITS);\n    }\n\n    source.edges.set(destination.id, destination);\n    destination.edges.set(source.id, source);\n  }\n\n  /**\n   * To get the associated vertices identifying the edges of a vertex\n   * @param vertex vertex for which the edges have been requested.\n   * @returns array of vertices\n   */\n  getEdges(vertex: Vertex) {\n    return vertex.edges;\n  }\n\n  /**\n   * To remove the edge comprised of two vertices\n   * @param source starting of the edge\n   * @param destination ending of the edge\n   */\n  removeEdge(source: Vertex, destination: Vertex) {\n    if (source.edges.size === 0 || destination.edges.size === 0) {\n      throw new Error(Errors.EDGES_EMPTY);\n    }\n\n    source.edges.delete(destination.id);\n    destination.edges.delete(source.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LinkedList.html":{"url":"classes/LinkedList.html","title":"class - LinkedList","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LinkedList\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/linked-list/linked-list.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                head\n                            \n                            \n                                length\n                            \n                            \n                                tail\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addNode\n                            \n                            \n                                getNode\n                            \n                            \n                                insertNode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/linked-list/linked-list.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        head\n                        \n                    \n                \n            \n                \n                    \n                        Type :     LinkedListNode\n\n                    \n                \n                    \n                        \n                                Defined in src/linked-list/linked-list.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/linked-list/linked-list.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tail\n                        \n                    \n                \n            \n                \n                    \n                        Type :     LinkedListNode\n\n                    \n                \n                    \n                        \n                                Defined in src/linked-list/linked-list.ts:7\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addNode\n                        \n                    \n                \n            \n            \n                \naddNode(value: T)\n                \n            \n\n\n            \n                \n                    Defined in src/linked-list/linked-list.ts:20\n                \n            \n\n\n            \n                \n                    To add a new node to the list at the tail.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNode\n                        \n                    \n                \n            \n            \n                \ngetNode(value: T)\n                \n            \n\n\n            \n                \n                    Defined in src/linked-list/linked-list.ts:39\n                \n            \n\n\n            \n                \n                    Get the node having a certain value\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     LinkedListNode\n\n                    \n                    \n                        LinkedListNode\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        insertNode\n                        \n                    \n                \n            \n            \n                \ninsertNode(value: T, node: LinkedListNode, position: NodePosition)\n                \n            \n\n\n            \n                \n                    Defined in src/linked-list/linked-list.ts:71\n                \n            \n\n\n            \n                \n                    To insert a node at a given position in the linked list.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    node\n                                    \n                                            LinkedListNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    position\n                                    \n                                                NodePosition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Errors } from '../errors.enum';\nimport LinkedListNode from './linked-list-node';\nimport { NodePosition } from './node-position';\n\nexport default class LinkedList {\n    head: LinkedListNode;\n    tail: LinkedListNode;\n    length: number;\n\n    constructor() {\n        this.head = null;\n        this.tail = null;\n        this.length = 0;\n    }\n\n    /**\n     * To add a new node to the list at the tail.\n     * @param value\n     */\n    addNode(value: T): void {\n        const node = new LinkedListNode(value);\n\n        if (this.length === 0) {\n            this.head = node;\n            this.tail = node;\n        } else {\n            this.tail.next = node;\n            node.prev = this.tail;\n            this.tail = node;\n        }\n        this.length++;\n    }\n\n    /**\n     * Get the node having a certain value\n     * @param value\n     * @returns LinkedListNode\n     */\n    getNode(value: T): LinkedListNode {\n        let current = this.head;\n\n        while (current) {\n            if (current.value === value) {\n                return current;\n            }\n            current = current.next;\n        }\n    }\n\n    /**\n     * Removes a node from the list\n     * @param node\n     * @returns\n     */\n    // removeNode(node: LinkedListNode): void {\n    //   if (this.length === 0) {\n    //     throw new Error(Errors.LINKED_LIST_EMPTY);\n    //   }\n\n    //   if (this.head === node) {\n    //     this.head === this.head.next;\n    //   }\n    // }\n\n    /**\n     * To insert a node at a given position in the linked list.\n     * @param value Value of the node to be inserted\n     * @param node The node before or after which the new node is inserted\n     * @param position To indicate the position of the newly added node - BEFORE, AFTER\n     */\n    insertNode(value: T, node: LinkedListNode, position: NodePosition) {\n        if (this.length === 0) {\n            throw new Error(Errors.LINKED_LIST_EMPTY);\n        }\n        const nodeToBeInserted = new LinkedListNode(value);\n\n        switch (position) {\n            case NodePosition.BEFORE:\n                nodeToBeInserted.prev = node.prev;\n                nodeToBeInserted.next = node;\n                node.prev = nodeToBeInserted;\n                this.length++;\n                return nodeToBeInserted;\n\n            case NodePosition.AFTER:\n                nodeToBeInserted.next = node.next;\n                nodeToBeInserted.prev = node;\n                node.next = nodeToBeInserted;\n                this.length++;\n                return nodeToBeInserted;\n\n            default:\n                throw new Error(Errors.INVALID_NODE_POSITION);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LinkedListNode.html":{"url":"classes/LinkedListNode.html","title":"class - LinkedListNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LinkedListNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/linked-list/linked-list-node.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                next\n                            \n                            \n                                prev\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(value: T, next: LinkedListNode, prev: LinkedListNode)\n                    \n                \n                        \n                            \n                                Defined in src/linked-list/linked-list-node.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        next\n                                                  \n                                                        \n                                                                    LinkedListNode\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prev\n                                                  \n                                                        \n                                                                    LinkedListNode\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        next\n                        \n                    \n                \n            \n                \n                    \n                        Type :     LinkedListNode | null\n\n                    \n                \n                    \n                        \n                                Defined in src/linked-list/linked-list-node.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prev\n                        \n                    \n                \n            \n                \n                    \n                        Type :     LinkedListNode | null\n\n                    \n                \n                    \n                        \n                                Defined in src/linked-list/linked-list-node.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T\n\n                    \n                \n                    \n                        \n                                Defined in src/linked-list/linked-list-node.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export default class LinkedListNode {\n    value: T;\n    next: LinkedListNode | null;\n    prev: LinkedListNode | null;\n\n    constructor(\n        value: T,\n        next: LinkedListNode = null,\n        prev: LinkedListNode = null\n    ) {\n        this.value = value;\n        this.next = next;\n        this.prev = prev;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Node.html":{"url":"classes/Node.html","title":"class - Node","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Node\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tree/node.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                branchNodes\n                            \n                            \n                                id\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(value: T, branchNodes: Node[])\n                    \n                \n                        \n                            \n                                Defined in src/tree/node.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        branchNodes\n                                                  \n                                                        \n                                                                        Node[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        branchNodes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Node[]\n\n                    \n                \n                    \n                        \n                                Defined in src/tree/node.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/tree/node.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T\n\n                    \n                \n                    \n                        \n                                Defined in src/tree/node.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { v4 as uuidv4 } from 'uuid';\n\nexport default class Node {\n    id: number;\n    value: T;\n    branchNodes: Node[];\n    //right: Node[];\n\n    constructor(value: T, branchNodes: Node[]) {\n        this.id = uuidv4();\n        this.value = value;\n        this.branchNodes = branchNodes;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Queue.html":{"url":"classes/Queue.html","title":"class - Queue","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Queue\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/queue/queue.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                store\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                dequeue\n                            \n                            \n                                enqueue\n                            \n                            \n                                peek\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    isEmpty\n                                \n                                \n                                    size\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        store\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/queue/queue.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        dequeue\n                        \n                    \n                \n            \n            \n                \ndequeue()\n                \n            \n\n\n            \n                \n                    Defined in src/queue/queue.ts:18\n                \n            \n\n\n            \n                \n                    To get the head element of the queue and remove the head\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        T\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enqueue\n                        \n                    \n                \n            \n            \n                \nenqueue(item: T)\n                \n            \n\n\n            \n                \n                    Defined in src/queue/queue.ts:10\n                \n            \n\n\n            \n                \n                    To add item to the queue\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        peek\n                        \n                    \n                \n            \n            \n                \npeek()\n                \n            \n\n\n            \n                \n                    Defined in src/queue/queue.ts:29\n                \n            \n\n\n            \n                \n                    Get head element of the queue\n\n\n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        T\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        isEmpty\n                    \n                \n\n                \n                    \n                        getisEmpty()\n                    \n                \n                            \n                                \n                                    Defined in src/queue/queue.ts:40\n                                \n                            \n                    \n                        \n                                Get if the queue is empty or not\n\n\n                                \n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        size\n                    \n                \n\n                \n                    \n                        getsize()\n                    \n                \n                            \n                                \n                                    Defined in src/queue/queue.ts:48\n                                \n                            \n                    \n                        \n                                Get the size of queue\n\n\n                                \n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Errors } from '../errors.enum';\n\nexport default class Queue {\n    store: T[] = [];\n\n    /**\n     * To add item to the queue\n     * @param item\n     */\n    enqueue(item: T) {\n        this.store.push(item);\n    }\n\n    /**\n     * To get the head element of the queue and remove the head\n     * @returns T\n     */\n    dequeue() {\n        if (this.isEmpty) {\n            throw new Error(Errors.QUEUE_EMPTY);\n        }\n        return this.store.shift();\n    }\n\n    /**\n     * Get head element of the queue\n     * @returns T\n     */\n    peek(): T {\n        if (this.isEmpty) {\n            throw new Error(Errors.QUEUE_EMPTY);\n        }\n        return this.store[0];\n    }\n\n    /**\n     * Get if the queue is empty or not\n     * @returns bool\n     */\n    get isEmpty() {\n        return this.size === 0;\n    }\n\n    /**\n     * Get the size of queue\n     * @returns length\n     */\n    get size() {\n        return this.store.length;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Stack.html":{"url":"classes/Stack.html","title":"class - Stack","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Stack\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stack/stack.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                store\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                peek\n                            \n                            \n                                pop\n                            \n                            \n                                push\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    isEmpty\n                                \n                                \n                                    size\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        store\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/stack/stack.ts:3\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        peek\n                        \n                    \n                \n            \n            \n                \npeek()\n                \n            \n\n\n            \n                \n                    Defined in src/stack/stack.ts:30\n                \n            \n\n\n            \n                \n                    Get head element of the stack\n\n\n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        T\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pop\n                        \n                    \n                \n            \n            \n                \npop()\n                \n            \n\n\n            \n                \n                    Defined in src/stack/stack.ts:17\n                \n            \n\n\n            \n                \n                    To get the head element of the stack and remove the head\n\n\n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        T\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        push\n                        \n                    \n                \n            \n            \n                \npush(item: T)\n                \n            \n\n\n            \n                \n                    Defined in src/stack/stack.ts:9\n                \n            \n\n\n            \n                \n                    To add item to the stack\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        isEmpty\n                    \n                \n\n                \n                    \n                        getisEmpty()\n                    \n                \n                            \n                                \n                                    Defined in src/stack/stack.ts:41\n                                \n                            \n                    \n                        \n                                Get if the stack is empty or not\n\n\n                                \n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        size\n                    \n                \n\n                \n                    \n                        getsize()\n                    \n                \n                            \n                                \n                                    Defined in src/stack/stack.ts:49\n                                \n                            \n                    \n                        \n                                Get the size of stack\n\n\n                                \n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Errors } from '../errors.enum';\nexport default class Stack {\n    store: T[] = [];\n\n    /**\n     * To add item to the stack\n     * @param item\n     */\n    push(item: T) {\n        this.store.push(item);\n    }\n\n    /**\n     * To get the head element of the stack and remove the head\n     * @returns T\n     */\n    pop(): T {\n        if (this.isEmpty) {\n            throw new Error(Errors.STACK_EMPTY);\n        }\n        const topItem = this.peek();\n        this.store.splice(this.size - 1);\n        return topItem;\n    }\n\n    /**\n     * Get head element of the stack\n     * @returns T\n     */\n    peek(): T {\n        if (this.isEmpty) {\n            throw new Error(Errors.STACK_EMPTY);\n        }\n        return this.store[this.size - 1];\n    }\n\n    /**\n     * Get if the stack is empty or not\n     * @returns bool\n     */\n    get isEmpty() {\n        return this.size === 0;\n    }\n\n    /**\n     * Get the size of stack\n     * @returns length\n     */\n    get size() {\n        return this.store.length;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Tree.html":{"url":"classes/Tree.html","title":"class - Tree","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Tree\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tree/tree.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                nodes\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addNode\n                            \n                            \n                                getNode\n                            \n                            \n                                removeNode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        nodes\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in src/tree/tree.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addNode\n                        \n                    \n                \n            \n            \n                \naddNode(node: Node)\n                \n            \n\n\n            \n                \n                    Defined in src/tree/tree.ts:10\n                \n            \n\n\n            \n                \n                    To add a node in the tree\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNode\n                        \n                    \n                \n            \n            \n                \ngetNode(nodeId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/tree/tree.ts:26\n                \n            \n\n\n            \n                \n                    To get a node from the tree\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodeId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeNode\n                        \n                    \n                \n            \n            \n                \nremoveNode(node: Node)\n                \n            \n\n\n            \n                \n                    Defined in src/tree/tree.ts:18\n                \n            \n\n\n            \n                \n                    To remove a node from the tree\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import Node from './node';\n\nexport default class Tree {\n    nodes = new Map();\n\n    /**\n     * To add a node in the tree\n     * @param node\n     */\n    addNode(node: Node) {\n        this.nodes.set(node.id, node);\n    }\n\n    /**\n     * To remove a node from the tree\n     * @param node\n     */\n    removeNode(node: Node) {\n        this.nodes.delete(node.id);\n    }\n\n    /**\n     * To get a node from the tree\n     * @param nodeId\n     */\n    getNode(nodeId: number) {\n        return this.nodes.get(nodeId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Vertex.html":{"url":"classes/Vertex.html","title":"class - Vertex","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Vertex\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/graph/vertex.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                edges\n                            \n                            \n                                id\n                            \n                            \n                                    Private\n                                types\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(value: T)\n                    \n                \n                        \n                            \n                                Defined in src/graph/vertex.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        edges\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map>\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in src/graph/vertex.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/graph/vertex.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        types\n                        \n                    \n                \n            \n                \n                    \n                        Type :         VertexType[]\n\n                    \n                \n                    \n                        \n                                Defined in src/graph/vertex.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T\n\n                    \n                \n                    \n                        \n                                Defined in src/graph/vertex.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { VertexType } from './vertex-type.enum';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport default class Vertex {\n  private types: VertexType[];\n  id: number;\n  value: T;\n  edges?: Map> = new Map();\n\n  constructor(value: T) {\n    this.id = uuidv4();\n    this.value = value;\n    this.types = [VertexType.LABELED];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/graph/graph.ts\n            \n            class\n            Graph\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/graph/vertex.ts\n            \n            class\n            Vertex\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/linked-list/linked-list-node.ts\n            \n            class\n            LinkedListNode\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/linked-list/linked-list.ts\n            \n            class\n            LinkedList\n            \n                37 %\n                (3/8)\n            \n        \n        \n            \n                \n                src/queue/queue.ts\n            \n            class\n            Queue\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/stack/stack.ts\n            \n            class\n            Stack\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/tree/node.ts\n            \n            class\n            Node\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/tree/tree.ts\n            \n            class\n            Tree\n            \n                60 %\n                (3/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            uuid : ^8.3.2\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Errors   (src/.../errors.enum.ts)\n                        \n                        \n                            NodePosition   (src/.../node-position.ts)\n                        \n                        \n                            VertexType   (src/.../vertex-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/errors.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Errors\n                    \n                \n                        \n                            \n                                 LINKED_LIST_EMPTY\n                            \n                        \n                        \n                            \n                                Value : The linked list is empty\n                            \n                        \n                        \n                            \n                                 INVALID_NODE_POSITION\n                            \n                        \n                        \n                            \n                                Value : Please provide a valid node position\n                            \n                        \n                        \n                            \n                                 STACK_EMPTY\n                            \n                        \n                        \n                            \n                                Value : The stack is empty\n                            \n                        \n                        \n                            \n                                 QUEUE_EMPTY\n                            \n                        \n                        \n                            \n                                Value : The queue is empty\n                            \n                        \n                        \n                            \n                                 EDGES_EMPTY\n                            \n                        \n                        \n                            \n                                Value : There are no edges to remove\n                            \n                        \n                        \n                            \n                                 EDGE_EXITS\n                            \n                        \n                        \n                            \n                                Value : Edge already exists\n                            \n                        \n            \n        \n\n    src/linked-list/node-position.ts\n    \n        \n            \n                \n                    \n                        \n                        NodePosition\n                    \n                \n                        \n                            \n                                 BEFORE\n                            \n                        \n                        \n                            \n                                 AFTER\n                            \n                        \n            \n        \n\n    src/graph/vertex-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        VertexType\n                    \n                \n                        \n                            \n                                 ISOLATED\n                            \n                        \n                        \n                            \n                                Value : Isolated\n                            \n                        \n                        \n                            \n                                 LEAF\n                            \n                        \n                        \n                            \n                                Value : Leaf\n                            \n                        \n                        \n                            \n                                 SOURCE\n                            \n                        \n                        \n                            \n                                Value : Source\n                            \n                        \n                        \n                            \n                                 SINK\n                            \n                        \n                        \n                            \n                                Value : Sink\n                            \n                        \n                        \n                            \n                                 SIMPLICIAL\n                            \n                        \n                        \n                            \n                                Value : Simplical\n                            \n                        \n                        \n                            \n                                 UNIVERSAL\n                            \n                        \n                        \n                            \n                                Value : Universal\n                            \n                        \n                        \n                            \n                                 CUT\n                            \n                        \n                        \n                            \n                                Value : Cut\n                            \n                        \n                        \n                            \n                                 LABELED\n                            \n                        \n                        \n                            \n                                Value : Labeled\n                            \n                        \n                        \n                            \n                                 UNLABELED\n                            \n                        \n                        \n                            \n                                Value : Unlabled\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\n\n\nData Structures in Typescript\nLibrary of data structures implemented in Typescript.\nData structures implemented in this library\n\nGraph\nLinkedList\nQueue\nStack\nTree\n\nTo test the project\n\nnpm run test - To test the library\ntest-watch - To test the library in watch mode\ntest-coverage - To generate the test coverage\nnpm run build - To build the library\nnpm run docs - To generate the docs\n\nLibrary documentation\n\nDocumentation\n\nContributors\n\n\n\n  Madhur Ahuja\n   Rajdeep Ratan\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    8 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.1.6-alpha\n        \n            Description : Data Structures in TypeScript\n        \n            License : MIT\n        \n            Author : Madhur Ahuja\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
